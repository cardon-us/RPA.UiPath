<Activity mc:Ignorable="sap sap2010" x:Class="EZGlobalHandler" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:ed="clr-namespace:EZFramework.Directories;assembly=EZFramework" xmlns:el="clr-namespace:EZFramework.Logging;assembly=EZFramework" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mva="clr-namespace:Microsoft.VisualBasic.Activities;assembly=System.Activities" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:ss="clr-namespace:System.Security;assembly=mscorlib" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:uico="http://schemas.uipath.com/workflow/activities/contracts" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="errorInfo" Type="InArgument(uico:ExceptionHandlerArgs)">
      <x:Property.Attributes>
        <RequiredArgumentAttribute />
      </x:Property.Attributes>
    </x:Property>
    <x:Property Name="result" Type="OutArgument(uico:ErrorAction)">
      <x:Property.Attributes>
        <RequiredArgumentAttribute />
      </x:Property.Attributes>
    </x:Property>
  </x:Members>
  <mva:VisualBasic.Settings>
    <x:Null />
  </mva:VisualBasic.Settings>
  <sap:VirtualizedContainerService.HintSize>1315,2115</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>GlobalHandler_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <scg:List x:TypeArguments="x:String" Capacity="46">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>UiPath.Activities.Contracts</x:String>
      <x:String>Microsoft.VisualBasic.CompilerServices</x:String>
      <x:String>System.Security</x:String>
    </scg:List>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <scg:List x:TypeArguments="AssemblyReference" Capacity="48">
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>UiPath.Excel</AssemblyReference>
      <AssemblyReference>System.ValueTuple</AssemblyReference>
      <AssemblyReference>UiPath.Activities.Contracts</AssemblyReference>
      <AssemblyReference>UiPath.Mail</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Composition</AssemblyReference>
      <AssemblyReference>UiPath.CV</AssemblyReference>
      <AssemblyReference>UiPath.IntelligentOCR</AssemblyReference>
      <AssemblyReference>UiPath.Word</AssemblyReference>
      <AssemblyReference>UiPath.Azure</AssemblyReference>
      <AssemblyReference>System.Collections.Immutable</AssemblyReference>
    </scg:List>
  </TextExpression.ReferencesForImplementation>
  <sap:WorkflowViewStateService.ViewState>
    <scg:Dictionary x:TypeArguments="x:String, x:Object">
      <x:Boolean x:Key="ShouldExpandAll">True</x:Boolean>
    </scg:Dictionary>
  </sap:WorkflowViewStateService.ViewState>
  <Sequence sap2010:Annotation.AnnotationText="This sequence steps in during execution when the project encounters an unmanaged error.&#xA;Choose the action to be taken after the Global Exception Handler steps in: &#xA;Continue - The exception is re-thrown.&#xA;Ignore - The exception is ignored, and the execution continues from the next activity.&#xA;Retry - The activity which threw the exception is retried.&#xA;Abort - The execution stops after running the current handler.&#xA;Important: Arguments 'errorInfo' and 'result' should not be removed." DisplayName="EZ Global Exception Handler" sap:VirtualizedContainerService.HintSize="767,1910" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="x:Boolean" Name="boolStop" />
      <Variable x:TypeArguments="x:String" Name="strRuntimeDirectory" />
      <Variable x:TypeArguments="scg:Dictionary(x:String, s:Tuple(x:String, x:String, ss:SecureString))" Name="dicCredentials" />
      <Variable x:TypeArguments="scg:List(scg:KeyValuePair(x:String, x:String))" Name="listExceptions" />
      <Variable x:TypeArguments="scg:Dictionary(x:String, s:Tuple(x:String, x:String))" Name="dicConfig" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <ed:Get_Runtime_Directory DisplayName="Get Runtime Directory" sap:VirtualizedContainerService.HintSize="725,22" sap2010:WorkflowViewState.IdRef="Get_Runtime_Directory_1" ProjectDirectory="[strRuntimeDirectory]" />
    <ui:ShouldStop DisplayName="Should Stop" sap:VirtualizedContainerService.HintSize="725,22" sap2010:WorkflowViewState.IdRef="ShouldStop_2" Result="[boolStop]" />
    <If Condition="[File.Exists(strRuntimeDirectory + &quot;\Data\Activity.txt&quot;) OR boolStop = True]" DisplayName="If: Retries Failed" sap:VirtualizedContainerService.HintSize="725,1003" sap2010:WorkflowViewState.IdRef="If_10">
      <If.Then>
        <Sequence DisplayName="Abort" sap:VirtualizedContainerService.HintSize="480,855" sap2010:WorkflowViewState.IdRef="Sequence_25">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <TryCatch DisplayName="Try Catch: Assign Main Variables" sap:VirtualizedContainerService.HintSize="438,574" sap2010:WorkflowViewState.IdRef="TryCatch_2">
            <TryCatch.Try>
              <ui:MultipleAssign DisplayName="Multiple Assign" sap:VirtualizedContainerService.HintSize="338,160" sap2010:WorkflowViewState.IdRef="MultipleAssign_1">
                <ui:MultipleAssign.AssignOperations>
                  <scg:List x:TypeArguments="ui:AssignOperation" Capacity="4">
                    <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_1">
                      <ui:AssignOperation.To>
                        <OutArgument x:TypeArguments="scg:Dictionary(x:String, s:Tuple(x:String, x:String))">[dicConfig]</OutArgument>
                      </ui:AssignOperation.To>
                      <ui:AssignOperation.Value>
                        <InArgument x:TypeArguments="scg:Dictionary(x:String, s:Tuple(x:String, x:String))">[CType(errorInfo.Variables("dicConfig"), Dictionary(of String, Tuple(of String, String)))]</InArgument>
                      </ui:AssignOperation.Value>
                    </ui:AssignOperation>
                    <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_4">
                      <ui:AssignOperation.To>
                        <OutArgument x:TypeArguments="scg:Dictionary(x:String, s:Tuple(x:String, x:String, ss:SecureString))">[dicCredentials]</OutArgument>
                      </ui:AssignOperation.To>
                      <ui:AssignOperation.Value>
                        <InArgument x:TypeArguments="scg:Dictionary(x:String, s:Tuple(x:String, x:String, ss:SecureString))">[CType(errorInfo.Variables("dicCredentials"), Dictionary(of String, Tuple(of String, String, SecureString)))]</InArgument>
                      </ui:AssignOperation.Value>
                    </ui:AssignOperation>
                    <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_2">
                      <ui:AssignOperation.To>
                        <OutArgument x:TypeArguments="scg:List(scg:KeyValuePair(x:String, x:String))">[listExceptions]</OutArgument>
                      </ui:AssignOperation.To>
                      <ui:AssignOperation.Value>
                        <InArgument x:TypeArguments="scg:List(scg:KeyValuePair(x:String, x:String))">[CType(errorInfo.Variables("listExceptions"), List(of KeyValuePair(of String, String)))]</InArgument>
                      </ui:AssignOperation.Value>
                    </ui:AssignOperation>
                  </scg:List>
                </ui:MultipleAssign.AssignOperations>
              </ui:MultipleAssign>
            </TryCatch.Try>
            <TryCatch.Catches>
              <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="404,104" sap2010:WorkflowViewState.IdRef="Catch`1_2">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <ActivityAction x:TypeArguments="s:Exception">
                  <ActivityAction.Argument>
                    <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                  </ActivityAction.Argument>
                  <TerminateWorkflow DisplayName="Terminate Workflow" Exception="[errorInfo.Exception]" sap:VirtualizedContainerService.HintSize="200,22" sap2010:WorkflowViewState.IdRef="TerminateWorkflow_16" Reason="[errorInfo.ActivityInfo.Name + &quot;: &quot; +errorInfo.Exception.Message]" />
                </ActivityAction>
              </Catch>
            </TryCatch.Catches>
          </TryCatch>
          <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Invoke: EZGH Log And Email" sap:VirtualizedContainerService.HintSize="438,87" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_31" UnSafe="False" WorkflowFileName="Workflows/EZFramework/Global Handler/EZGH Log And Email.xaml">
            <ui:InvokeWorkflowFile.Arguments>
              <InArgument x:TypeArguments="uico:ExceptionHandlerArgs" x:Key="errorInfo">[errorInfo]</InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="strMessage">["Aborting process... Error: " + errorInfo.ActivityInfo.Name + ": " + errorInfo.Exception.Message]</InArgument>
              <InArgument x:TypeArguments="scg:Dictionary(x:String, s:Tuple(x:String, x:String, ss:SecureString))" x:Key="dicCredentials">[dicCredentials]</InArgument>
              <InArgument x:TypeArguments="scg:Dictionary(x:String, s:Tuple(x:String, x:String))" x:Key="dicConfig">[dicConfig]</InArgument>
              <InArgument x:TypeArguments="scg:List(scg:KeyValuePair(x:String, x:String))" x:Key="listExceptions">[listExceptions]</InArgument>
            </ui:InvokeWorkflowFile.Arguments>
          </ui:InvokeWorkflowFile>
          <TerminateWorkflow DisplayName="Terminate Workflow" Exception="[errorInfo.Exception]" sap:VirtualizedContainerService.HintSize="438,22" sap2010:WorkflowViewState.IdRef="TerminateWorkflow_17" Reason="[errorInfo.ActivityInfo.Name + &quot;: &quot; +errorInfo.Exception.Message]" />
        </Sequence>
      </If.Then>
    </If>
    <If Condition="[errorInfo.RetryCount &gt;= 2]" DisplayName="If: Retried at least Twice" sap:VirtualizedContainerService.HintSize="725,534" sap2010:WorkflowViewState.IdRef="If_11">
      <If.Then>
        <Sequence DisplayName="Rethrow error" sap:VirtualizedContainerService.HintSize="376,386" sap2010:WorkflowViewState.IdRef="Sequence_19">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <Assign sap:VirtualizedContainerService.HintSize="334,60" sap2010:WorkflowViewState.IdRef="Assign_17">
            <Assign.To>
              <OutArgument x:TypeArguments="uico:ErrorAction">[result]</OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="uico:ErrorAction">[errorAction.Continue]</InArgument>
            </Assign.Value>
          </Assign>
          <el:Append_to_Log DisplayName="Append to Log" sap:VirtualizedContainerService.HintSize="334,22" sap2010:WorkflowViewState.IdRef="Append_to_Log_8" LogLevel="Error" LogMessage="[&quot;Rethrowing: &quot; + errorInfo.ActivityInfo.Name + &quot;... ERROR: &quot; + errorInfo.Exception.Message]" />
          <ui:WriteTextFile DisplayName="Write Text File" FileName="[strRuntimeDirectory + &quot;\Data\Activity.txt&quot;]" sap:VirtualizedContainerService.HintSize="334,132" sap2010:WorkflowViewState.IdRef="WriteTextFile_4" Text="[errorInfo.ActivityInfo.Name]" />
        </Sequence>
      </If.Then>
      <If.Else>
        <Sequence DisplayName="Retry activity" sap:VirtualizedContainerService.HintSize="304,214" sap2010:WorkflowViewState.IdRef="Sequence_20">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <Assign sap:VirtualizedContainerService.HintSize="262,60" sap2010:WorkflowViewState.IdRef="Assign_18">
            <Assign.To>
              <OutArgument x:TypeArguments="uico:ErrorAction">[result]</OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="uico:ErrorAction">[errorAction.Retry]</InArgument>
            </Assign.Value>
          </Assign>
          <el:Append_to_Log DisplayName="Append to Log" sap:VirtualizedContainerService.HintSize="262,22" sap2010:WorkflowViewState.IdRef="Append_to_Log_10" LogLevel="Error" LogMessage="[&quot;Retrying: &quot; + errorInfo.ActivityInfo.Name + &quot;... ERROR: &quot; + errorInfo.Exception.Message]" />
        </Sequence>
      </If.Else>
    </If>
  </Sequence>
</Activity>